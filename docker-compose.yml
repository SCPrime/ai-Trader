# Docker Compose configuration for AI Trading Bot
# Multi-service containerized deployment with monitoring and caching

version: '3.8'

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local

services:
  # Main Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: deployment/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
    container_name: ai-trading-bot
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Environment configuration
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://trader:${POSTGRES_PASSWORD:-trading123}@postgres:5432/trading_bot

    # Volume mounts for data persistence
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./backups:/app/backups

    # Port mapping (for monitoring API if implemented)
    ports:
      - "8000:8000"

    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    networks:
      - trading-network

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

    # Volume for data persistence
    volumes:
      - redis-data:/data

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

    networks:
      - trading-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

    # Database configuration
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trading123}
      - PGDATA=/var/lib/postgresql/data/pgdata

    # Volume for data persistence
    volumes:
      - postgres-data:/var/lib/postgresql/data

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

    networks:
      - trading-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # Grafana Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

    # Grafana configuration
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_HTTP_PORT=3000
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=trading_bot
      - GF_DATABASE_USER=trader
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD:-trading123}

    # Port mapping
    ports:
      - "3000:3000"

    # Volume for dashboard persistence
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources

    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    networks:
      - trading-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

    # Prometheus configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

    # Port mapping
    ports:
      - "9090:9090"

    # Configuration volume
    volumes:
      - ./deployment/prometheus:/etc/prometheus

    networks:
      - trading-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Watchtower for automatic updates (Optional)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: trading-watchtower
    restart: unless-stopped

    # Only update specific containers
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # Daily at 4 AM

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - trading-network

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"